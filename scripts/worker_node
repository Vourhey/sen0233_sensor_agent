#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
import json

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_msgs.msg import Demand, Result
from ipfs_common.msg import Multihash
from ipfs_common.ipfs_rosbag import IpfsRosBag

from sensors_pack_agent.sensors import HTU21D

class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)

        self.result_publish = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        self.sensors = []
        self.sensors.append(HTU21D())
        # self.sensors.append(PM())

        rospy.loginfo('Worker node is launched')

    def on_incoming_demand(self, msg: Demand):
        rospy.loginfo('Incoming demand %s...', str(msg))
        if msg.model.multihash == rospy.get_param('~model'):
            self.send_result(msg)
        else:
            rospy.loginfo("Demand is not for me")

    def get_multihash(self, data: dict) -> Multihash:
        topics = {
                "/data": [String(json.dumps(data))]
                }
        bag = IpfsRosBag(messages=topics)
        return bag.multihash

    def send_result(self, msg: Demand):
        rospy.loginfo('Starting process...')

        result_dict = {}
        for s in self.sensors:
            r = s.data()
            result_dict.update(r)

        rospy.loginfo(result_dict)

        res = Result()
        res.liability = msg.sender
        res.result = self.get_multihash(result_dict)
        res.success = True

        rospy.loginfo(res)

        self.result_publish.publish(res)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()
