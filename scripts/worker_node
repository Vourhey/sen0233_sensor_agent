#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest


class WorkerNode:

    # TODO: need an objective messages collector and empty objective (by new liability) starter
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        '''
          Any new liabilities for our CPS will be published to /liability/ready topic
        '''
        rospy.Subscriber('/liability/ready', Liability, self.subscribe_and_start)

        rospy.wait_for_service('liability/finish')

        '''
          These are required services to start and finish a liability
        '''
        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))

        rospy.loginfo('Worker node is launched')

    '''
      Any topics in objective would appear under /liability/eth_0x... prefix
      Here you register all necessary topics to callbacks and start the liability
    '''
    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')

        '''
          Register any topics you need to publish logs, data etc
        '''
        prefix = '/liability/eth_' + liability.address.address
        pub = rospy.Publisher(prefix+'/data', String, queue_size=128)

        '''
          Here you get a message from an objective's topic and perform some task
          After this you have to finish the liability
        '''
        def callback(task):
            rospy.loginfo('Got new tast: %s', task)

            # MAKE YOUR PROCESS HERE
            pub.publish(String(data="{\"data\": \"Salut!\"}"))
            rospy.loginfo('Worker works!')

            self.liability_proxy.finish(liability.address, True)
            rospy.loginfo('Process complete.')
        rospy.Subscriber(prefix + '/task', String, callback)

        self.liability_proxy.start(liability.address)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()
